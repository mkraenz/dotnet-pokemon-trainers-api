@page
@model CreatePokemonModel

@{
    ViewData["Title"] = "Create Pokemon";
    object className(string value) {
        @* double at-character before class to escape in razor *@
        return new { htmlAttributes = new { @@class = value } };
    }
    object classNameForValidation() {
        return new { @@class = "text-danger" };
    }
}

<h1>Create Pokemon</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>
            @* see https://www.tutorialsteacher.com/mvc/html-helpers *@
            @Html.HiddenFor(model => model.Pokemon.TrainerId)
            @* TODO SpeciesId. select by species name *@
            <div class="form-group mb-4">
                @Html.LabelFor(m => m.Pokemon.SpeciesId)
                @Html.EditorFor(m => m.Pokemon.SpeciesId, className("form-control"))
                @Html.ValidationMessageFor(m => m.Pokemon.SpeciesId, "", classNameForValidation())
         </div>
            <div class="form-group mb-4">
                @Html.LabelFor(m => m.Pokemon.Level)
                @Html.EditorFor(m => m.Pokemon.Level, className("form-control"))
                @Html.ValidationMessageFor(m => m.Pokemon.Level, "", classNameForValidation())
            </div>
            <div class="form-group mb-4">
                @Html.LabelFor(m => m.Pokemon.Nickname)
                @Html.EditorFor(m => m.Pokemon.Nickname, className("form-control"))
                @Html.ValidationMessageFor(m => m.Pokemon.Nickname, "", classNameForValidation())
            </div>
            <div class="form-group mb-4">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-page="/Trainer">Go back</a>
</div>

@section Scripts {
@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}